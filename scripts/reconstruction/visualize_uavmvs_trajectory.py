import os
import argparse

from typing import NamedTuple

import numpy as np
import open3d as o3d


###############################################################################
###############################################################################


def _parse_float_list(line):
    return [float(_) for _ in line.split()]


def _eat_position(f):
    position = np.array(_parse_float_list(f.readline()))
    assert position.shape == (3,)
    return position


def _eat_rotation(f):
    rotation = np.array(
        [
            _parse_float_list(f.readline()),
            _parse_float_list(f.readline()),
            _parse_float_list(f.readline()),
        ]
    )
    assert rotation.shape == (3, 3)
    return rotation


class TrajectoryCamera(NamedTuple):
    """ Represents a camera pose entry in a .traj file. """

    position: np.ndarray
    rotation: np.ndarray  # NOTE (3, 3) rotation matrix or (4,) xyzw quaternion


###############################################################################
###############################################################################


def axis_line_set(origin, size=1.0):
    points = [
        np.asarray(origin, dtype=np.float32) + size * np.asarray(_, dtype=np.float32)
        for _ in [[0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1]]
    ]
    line_set = o3d.geometry.LineSet(
        points=o3d.utility.Vector3dVector(points),
        lines=o3d.utility.Vector2iVector([[0, 1], [0, 2], [0, 3]]),
    )
    line_set.colors = o3d.utility.Vector3dVector([[1, 0, 0], [0, 1, 0], [0, 0, 1]])
    return line_set  # TODO rotate this based on the camera's rotation


###############################################################################
###############################################################################


def main(args: argparse.Namespace) -> None:
    with open(args.trajectory, "r") as f:
        trajectory = []
        if args.csv:
            f.readline()  # skip the "x,y,z,qw,qx,qy,qz,key" header
            for line in f.readlines():
                x, y, z, qw, qx, qy, qz, _key = line.split(",")
                # NOTE ignore key (0 = spline interpolated position, 1 = camera position)
                trajectory.append(
                    TrajectoryCamera(
                        position=np.array([x, y, z]),
                        rotation=np.array([qx, qy, qz, qw]),
                    )
                )
        else:
            n_of_cameras = int(f.readline())
            for _ in range(n_of_cameras):
                position = _eat_position(f)
                rotation = _eat_rotation(f)
                _focal_length = float(f.readline())
                # NOTE skip the camera's focal length
                trajectory.append(TrajectoryCamera(position, rotation))

            assert len(trajectory) == n_of_cameras

    geometry_list = [
        axis_line_set(size=0.5, origin=camera.position)
        # o3d.geometry.TriangleMesh.create_coordinate_frame(size=1, origin=camera.position)
        for camera in trajectory
    ]

    if args.mesh:
        mesh = o3d.io.read_triangle_mesh(args.mesh)
        geometry_list.append(mesh)
        if args.verbose:
            print(mesh)
            # print(np.asarray(mesh.vertices))
            # print(np.asarray(mesh.triangles))
            print()

    if args.cloud:
        cloud = o3d.io.read_point_cloud(args.cloud)
        geometry_list.append(cloud)
        if args.verbose:
            print(cloud)
            # print(np.asarray(cloud.points))
            print()

    # FIXME Open3D can't really handle rendering more than 100 coordinate axis
    o3d.visualization.draw_geometries(geometry_list)


###############################################################################
###############################################################################


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Visualize a trajectory generated by uavmvs with Open3D."
    )

    parser.add_argument("trajectory", type=str, help="Path to the input .TRAJ (or .CSV) file")
    parser.add_argument(
        "--csv", action="store_true", help="Read the interpolated trajectory instead"
    )
    # TODO add an option to convert and export the .csv / .traj files as .ply

    parser.add_argument("--mesh", type=str, help="Path to a .PLY mesh file")
    parser.add_argument("--cloud", type=str, help="Path to a .PLY point cloud file")

    parser.add_argument("--verbose", "-v", action="store_true", help="Increase verbosity")

    args = parser.parse_args()

    main(args)


###############################################################################
###############################################################################
