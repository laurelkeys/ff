import os
import time
import argparse

import ff
import airsim

from airsim import Vector3r
from ff.types import to_xyz_str
from ie.airsimy import AirSimImage, connect
from uavmvs_parse_traj import convert_uavmvs_to_airsim_position

try:
    from include_in_path import FF_PROJECT_ROOT, include

    include(FF_PROJECT_ROOT, "misc", "tools", "uavmvs_parse_traj")
    from uavmvs_parse_traj import parse_uavmvs, convert_uavmvs_to_airsim_pose
except:
    raise

# NOTE much from this file is simply copy-pasted from cv_trace_uavmvs_trajectory.py

###############################################################################
## preflight (called before connecting) #######################################
###############################################################################


def preflight(args: argparse.Namespace) -> None:
    _, ext = os.path.splitext(args.trajectory_path)
    assert os.path.isfile(args.trajectory_path), f"Invalid file path: '{args.trajectory_path}'"
    assert ext in parse_uavmvs.keys(), f"Invalid trajectory extension: '{args.trajectory_path}'"

    args.trajectory = parse_uavmvs[ext](args.trajectory_path)
    if args.verbose:
        ff.log(f"The trajectory has {len(args.trajectory)} camera poses")

    if args.env_name is not None:
        # the --launch option was passed
        ff.launch_env(*ff.LaunchEnvArgs(args))
        ff.input_or_exit("\nPress [enter] to connect to AirSim ")


###############################################################################
## fly (called after connecting) ##############################################
###############################################################################


def fly(client: airsim.MultirotorClient, args: argparse.Namespace) -> None:
    initial_pose = client.simGetVehiclePose()
    if args.verbose:
        ff.print_pose(initial_pose, airsim.to_eularian_angles)

    if args.flush:
        client.simFlushPersistentMarkers()

    def transform(position):
        if args.scale is not None:
            position *= args.scale
        if args.offset is not None:
            position += Vector3r(*args.offset)
        return position

    # NOTE (at least for now) don't worry about matching the camera rotation optimized
    # by uavmvs, simply follow the generated viewpoint positions with the drone.
    camera_positions = [convert_uavmvs_to_airsim_position(_, transform) for _ in args.trajectory]
    n_of_poses = len(camera_positions)
    pad = len(str(n_of_poses))

    print("TimeStamp\tPOS_X\tPOS_Y\tPOS_Z\tQ_W\tQ_X\tQ_Y\tQ_Z\tImageFile")
    for i, position in enumerate(camera_positions):
        pose_str = f"{i:{pad}} / {n_of_poses}"
        position_str = to_xyz_str(position, show_hints=False)
        ff.log(f"Going to position ({pose_str}): {position_str}")

        x, y, z = position.to_numpy_array()
        client.moveToPositionAsync(x,y,z, velocity=2).join()
        client.simPause(True)
        # TODO print the same information as in airsim_rec.txt
        client.simPause(False)


###############################################################################
## main #######################################################################
###############################################################################


def main(args: argparse.Namespace) -> None:
    if args.verbose:
        ff.print_airsim_path(airsim.__path__)

    preflight(args)  # setup
    client = connect(ff.SimMode.Multirotor)
    try:
        fly(client, args)  # do stuff
    except KeyboardInterrupt:
        client.reset()  # avoid UE4 'fatal error' when exiting with Ctrl+C
    finally:
        ff.log("Done")


###############################################################################
## argument parsing ###########################################################
###############################################################################


def get_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(
        description="Follow a trajectory generated by uavmvs in AirSim's Multirotor mode."
        " The drone position and orientation are printed after reaching every view point."
    )

    parser.add_argument("trajectory_path", type=str, help="Path to a .TRAJ, .CSV or .UTJ file")

    parser.add_argument("--flush", action="store_true", help="Flush old plots")

    parser.add_argument(
        "--offset",
        type=float,
        nargs=3,
        metavar=("X", "Y", "Z"),
        help="Offset added to all points  (e.g. --offset -55 11 1)",
    )
    parser.add_argument("--scale", type=float, help="Scale added to all points  (e.g. --scale 0.2)")

    ff.add_arguments_to(parser)
    return parser


if __name__ == "__main__":
    parser = get_parser()
    args = parser.parse_args()

    main(args)
