import io
import textwrap

import numpy as np

from uavmvs_parse_traj import TrajectoryCamera, TrajectoryCameraKind, CSV_HEADER

# NOTE this is a throwaway file used to make sure that the quaternion representation
# used in a .csv trajectory is equivalent to the 3x3 rotation matrix from .traj file.

# Example .csv trajectory file, with interpolated viewpoints removed (key=0):
UAVMVS_CSV = textwrap.dedent(
    """\
    x,y,z,qw,qx,qy,qz,key
    -22.243343,95.361702,70.221420,-0.10968,-0.318536,0.890247,-0.306537,1
    -11.354782,102.460999,111.929054,0.00341546,0.0243022,0.98997,-0.139131,1
    -53.955627,118.461815,138.701080,0.0263632,0.0686783,0.931051,-0.357397,1
    -73.814194,123.494965,143.120941,-2.32971e-09,-5.48846e-09,0.920505,-0.390731,1
    -57.189331,65.442207,96.676376,-0.0773236,-0.397796,0.897413,-0.174439,1
    -66.880020,-6.339328,146.295044,0.0984101,0.700225,-0.700225,0.0984101,1
    -10.431096,-13.280599,148.389984,-0.0493252,0.705384,0.705384,0.0493252,1
    -6.339328,-11.419400,125.211922,-0.0493252,0.705384,0.705384,0.0493252,1
    2.694400,-6.934784,123.710114,0.0933675,0.888331,0.447148,-0.0469971,1
    -3.449591,46.089291,145.955109,0.0468862,0.333611,0.932381,-0.131038,1
    72.977188,89.954628,141.863068,0.0912212,0.250628,0.905653,-0.329631,1
    38.792229,54.644901,63.791847,0.0603926,0.210614,0.937905,-0.26894,1
    69.240967,64.727074,59.994568,0.163327,0.29465,0.823493,-0.45647,1
    74.258842,61.729294,61.537926,0.324441,0.499595,0.673627,-0.437458,1
    116.195030,-2.459053,58.976074,0.35705,0.765698,0.484872,-0.2261,1
    92.282753,-13.032544,63.296974,0.319102,0.876727,0.338191,-0.123091,1
    107.269005,-47.218555,119.890038,0.100796,0.717199,0.68283,-0.0959654,1
    91.626602,-72.822739,137.466980,0.290953,0.895462,0.320401,-0.104105,1
    144.123123,-63.554142,112.147942,0.190063,0.662829,0.696191,-0.19963,1
    125.802986,-109.555092,52.968803,0.484931,0.807061,0.288771,-0.173511,1
    54.480747,-92.303192,54.775143,0.452465,0.850964,0.235494,-0.125214,1
    35.323036,-174.997940,50.115829,0.499849,0.865765,0.0212534,-0.0122706,1
    -13.840832,-124.111099,84.971451,0.35826,0.933299,-0.0229112,0.00879479,1
    7.211993,-116.615952,148.464172,0.258507,0.964762,-0.0473957,0.0126996,1
    0.505048,-101.797935,145.833145,0.258507,0.964762,-0.0473957,0.0126996,1
    -7.257790,-73.194489,132.821991,0.190809,0.981627,2.14541e-08,-4.17027e-09,1
    -2.925205,-80.147293,65.470848,0.341093,0.937147,0.0691282,-0.0251606,1
    -58.900578,-88.448929,83.525566,0.358476,0.88726,-0.269147,0.108742,1
    -85.952682,-69.348526,53.401608,0.415043,0.814567,-0.361073,0.183976,1
    -70.927658,-63.831791,70.865349,0.288311,0.887329,-0.342281,0.111214,1
    -91.780434,20.839167,77.291862,0.20007,0.746671,-0.612777,0.164193,1
    -76.725357,46.347168,77.188904,-0.123853,-0.582682,0.785655,-0.166996,1
    -73.948616,81.568695,62.739445,-0.156841,-0.271656,0.822316,-0.474764,1"""
)

# Example .traj file (output of shorten-trajectory, input of interpolate-trajectory):
UAVMVS_TRAJ = textwrap.dedent(
    """\
    33
    -22.2433 95.3616 70.2214
    -0.77301 -0.634393 -0
    -0.499909 0.609141 -0.615661
    0.390571 -0.475913 -0.788011
    0.86
    -11.3548 102.461 111.929
    -0.998795 0.0490673 0
    0.0471665 0.960104 -0.275637
    -0.0135248 -0.275305 -0.961262
    0.86
    -53.9556 118.462 138.701
    -0.989177 0.14673 0
    0.109042 0.735101 -0.669131
    -0.0981818 -0.661888 -0.743145
    0.86
    -73.8142 123.495 143.121
    -1 -1.19249e-08 -0
    -8.28372e-09 0.694658 -0.71934
    8.57804e-09 -0.71934 -0.694658
    0.86
    -57.1893 65.4422 96.6764
    -0.671559 -0.740951 -0
    -0.686998 0.622659 -0.374606
    0.277565 -0.25157 -0.927184
    0.86
    -66.88 -6.33933 146.295
    0 -1 0
    -0.961262 -0 -0.275637
    0.275637 0 -0.961262
    0.86
    -10.4311 -13.2806 148.39
    -0 1 0
    0.990268 0 0.139173
    0.139173 0 -0.990268
    0.86
    -6.33933 -11.4194 125.212
    -0 1 0
    0.990268 0 0.139173
    0.139173 0 -0.990268
    0.86
    2.69446 -6.93478 123.71
    0.595699 0.803208 0
    0.785656 -0.582682 -0.207912
    -0.166996 0.123853 -0.978148
    0.86
    -3.44973 46.0892 145.955
    -0.77301 0.634393 0
    0.609818 0.743065 -0.275637
    -0.174863 -0.213071 -0.961262
    0.86
    72.9771 89.9546 141.863
    -0.857729 0.514103 0
    0.393826 0.657058 -0.642787
    -0.330459 -0.551337 -0.766045
    0.86
    38.7922 54.6449 63.7919
    -0.903989 0.427555 0
    0.362587 0.766627 -0.529919
    -0.22657 -0.479041 -0.848048
    0.86
    69.241 64.7271 59.9946
    -0.77301 0.634393 0
    0.336177 0.409633 -0.848048
    -0.537996 -0.65555 -0.529919
    0.86
    74.2589 61.7294 61.538
    -0.290285 0.95694 0
    0.389223 0.11807 -0.913545
    -0.874208 -0.265188 -0.406737
    0.86
    116.195 -2.45905 58.976
    0.427555 0.903989 0
    0.581073 -0.274827 -0.766044
    -0.692496 0.327526 -0.642788
    0.86
    92.2827 -13.0325 63.2969
    0.740951 0.671559 0
    0.514444 -0.567602 -0.642787
    -0.43167 0.476274 -0.766045
    0.86
    107.269 -47.2186 119.89
    0.0490675 0.998795 0
    0.960104 -0.0471667 -0.275637
    -0.275305 0.0135248 -0.961262
    0.86
    91.6266 -72.8227 137.467
    0.77301 0.634393 0
    0.513235 -0.625379 -0.587785
    -0.372887 0.454364 -0.809017
    0.86
    144.123 -63.5542 112.148
    -0.0490677 0.998795 0
    0.847027 0.0416117 -0.529919
    -0.529281 -0.0260019 -0.848048
    0.86
    125.803 -109.555 52.9687
    0.77301 0.634393 0
    0.29783 -0.362906 -0.882948
    -0.560136 0.682528 -0.469472
    0.86
    54.4808 -92.3032 54.7752
    0.857729 0.514103 0
    0.287483 -0.479636 -0.829037
    -0.42621 0.711089 -0.559193
    0.86
    35.323 -174.998 50.1159
    0.998796 0.0490677 0
    0.0245339 -0.499398 -0.866025
    -0.0424939 0.864982 -0.5
    0.86
    -13.8408 -124.111 84.9714
    0.998796 -0.0490676 0
    -0.0364644 -0.74225 -0.669131
    0.0328327 0.668325 -0.743145
    0.86
    7.21198 -116.616 148.464
    0.995185 -0.0980171 0
    -0.0848853 -0.861855 -0.5
    0.0490085 0.497592 -0.866026
    0.86
    0.505036 -101.798 145.833
    0.995185 -0.0980171 0
    -0.0848853 -0.861855 -0.5
    0.0490085 0.497592 -0.866026
    0.86
    -7.25779 -73.1945 132.822
    1 4.37114e-08 0
    4.05285e-08 -0.927184 -0.374606
    -1.63746e-08 0.374606 -0.927184
    0.86
    -2.92518 -80.1473 65.4708
    0.989176 0.146731 0
    0.112402 -0.757753 -0.642787
    -0.0943166 0.63583 -0.766045
    0.86
    -58.9006 -88.449 83.5256
    0.83147 -0.55557 0
    -0.399644 -0.598109 -0.694658
    0.385931 0.577587 -0.71934
    0.86
    -85.9527 -69.3485 53.4016
    0.671559 -0.740951 0
    -0.43552 -0.394732 -0.809017
    0.599442 0.543303 -0.587785
    0.86
    -70.9277 -63.8318 70.8654
    0.740951 -0.671559 0
    -0.543303 -0.599442 -0.587785
    0.394732 0.43552 -0.809017
    0.86
    -91.7805 20.8392 77.2918
    0.19509 -0.980785 0
    -0.849385 -0.168953 -0.5
    0.490392 0.0975451 -0.866026
    0.86
    -76.7253 46.3472 77.189
    -0.290284 -0.95694 -0
    -0.874209 0.265188 -0.406737
    0.389223 -0.118069 -0.913545
    0.86
    -73.9485 81.5687 62.7395
    -0.803208 -0.595699 -0
    -0.29785 0.401604 -0.866025
    0.515891 -0.695598 -0.5
    0.86"""
)

RTOL, ATOL = 1e-4, 1e-8  # np.allclose defaults are 1.e-5 and 1.e-8


def main():
    csv_trajectory, traj_trajectory = [], []

    with io.StringIO(UAVMVS_CSV) as f:
        # @Cutnpaste from parse_uavmvs_csv
        assert f.readline().rstrip().lower() == CSV_HEADER
        for line in f.readlines():
            x, y, z, qw, qx, qy, qz, key = line.split(",")
            position = np.array([float(_) for _ in [x, y, z]])
            rotation = np.array([float(_) for _ in [qw, qx, qy, qz]])
            csv_trajectory.append(
                TrajectoryCamera(
                    position,
                    rotation,
                    kind=TrajectoryCameraKind.Csv,
                    spline_interpolated=(int(key) == 0),
                )
            )

    with io.StringIO(UAVMVS_TRAJ) as f:
        # @Cutnpaste from parse_uavmvs_traj
        n_of_cameras = int(f.readline())
        for _ in range(n_of_cameras):
            position = np.array([float(_) for _ in f.readline().split()])
            rotation = np.array(
                [
                    [float(_) for _ in f.readline().split()],
                    [float(_) for _ in f.readline().split()],
                    [float(_) for _ in f.readline().split()],
                ]
            )
            focal_length = float(f.readline())
            assert position.shape == (3,)
            assert rotation.shape == (3, 3)
            traj_trajectory.append(
                TrajectoryCamera(
                    position,
                    rotation,
                    kind=TrajectoryCameraKind.Traj,
                    focal_length=focal_length,
                )
            )

    assert len(csv_trajectory) == len(traj_trajectory)
    for csv_camera, traj_camera in zip(csv_trajectory, traj_trajectory):
        # Check positions are the same:
        assert np.allclose(
            csv_camera.position, traj_camera.position, RTOL, ATOL
        ), f"{csv_camera.position} != {traj_camera.position}"

        csv_quat = csv_camera.rotation
        traj_rot = traj_camera.rotation
        traj_rot_to_csv_quat = traj_camera._rotation_into(TrajectoryCameraKind.Csv)

        # Check rotation matrix to quaternion conversion:
        assert np.allclose(
            csv_quat, traj_rot_to_csv_quat, RTOL, ATOL
        ), f"{csv_quat} != {traj_rot_to_csv_quat}"


if __name__ == "__main__":
    main()
